
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { 
      phoneNumber, 
      message, 
      contactName, 
      firebaseConfig,
      module = 'observatory' // 'commercial' ou 'observatory'
    } = await req.json()
    
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
    if (!openaiApiKey) {
      throw new Error('OpenAI API key n√£o configurada')
    }

    if (!firebaseConfig?.databaseURL || !firebaseConfig?.apiKey) {
      throw new Error('Firebase do cliente n√£o configurado')
    }

    // Buscar hist√≥rico do Firebase do cliente
    const firebaseUrl = firebaseConfig.databaseURL.replace(/\/$/, '')
    const authToken = firebaseConfig.apiKey
    
    console.log(`üîç Buscando hist√≥rico no Firebase do cliente (${module})`)
    
    const conversationsUrl = `${firebaseUrl}/conversations/${module}.json?auth=${authToken}`
    let context = ''
    let profile = null
    
    try {
      const response = await fetch(conversationsUrl)
      if (response.ok) {
        const conversations = await response.json()
        if (conversations) {
          // Encontrar conversa pelo telefone
          const userConversations = Object.values(conversations).filter(
            (conv: any) => conv.contact_phone === phoneNumber
          )
          
          if (userConversations.length > 0) {
            const lastConv = userConversations[userConversations.length - 1] as any
            profile = lastConv.psychological_profile || lastConv.sales_analysis
            
            // √öltimas 5 mensagens para contexto
            const recentMessages = lastConv.messages?.slice(-5) || []
            context = recentMessages.map((msg: any) => `${msg.sender}: ${msg.text}`).join('\n')
          }
        }
      }
    } catch (error) {
      console.error('Erro ao buscar do Firebase:', error)
    }

    // Gerar resposta com OpenAI baseada no m√≥dulo
    const systemPrompt = module === 'commercial' 
      ? `Voc√™ √© um assistente de vendas especializado em convers√£o e an√°lise comercial.

CONTEXTO DO CLIENTE:
${profile ? `
Perfil Comercial:
- Inten√ß√£o de compra: ${profile.sales_intent || 'N/A'}
- Est√°gio no funil: ${profile.sales_stage || 'N/A'}
- Obje√ß√µes principais: ${profile.main_objections?.join(', ') || 'N/A'}
- Pontos de interesse: ${profile.interest_points?.join(', ') || 'N/A'}
` : 'Perfil comercial ainda n√£o dispon√≠vel - primeira intera√ß√£o'}

HIST√ìRICO RECENTE:
${context || 'Sem hist√≥rico anterior'}

DIRETRIZES COMERCIAIS:
1. Foque na convers√£o e gera√ß√£o de valor
2. Identifique necessidades e dores do cliente
3. Apresente solu√ß√µes de forma consultiva
4. Use t√©cnicas de vendas apropriadas
5. Mantenha o foco no ROI e benef√≠cios
6. Conduza para pr√≥ximos passos no funil

Responda focando em vendas e convers√£o.`
      : `Voc√™ √© um assistente conselheiro especializado em bem-estar emocional e psicol√≥gico.

CONTEXTO DO CLIENTE:
${profile ? `
Perfil Psicol√≥gico:
- Tra√ßos de personalidade: ${profile.personality_traits?.join(', ') || 'N/A'}
- Estilo de comunica√ß√£o: ${profile.communication_style || 'N/A'}
- √Åreas de preocupa√ß√£o: ${profile.areas_of_concern?.join(', ') || 'N/A'}
- Pontos fortes: ${profile.strengths?.join(', ') || 'N/A'}
` : 'Perfil ainda n√£o dispon√≠vel - primeira intera√ß√£o'}

HIST√ìRICO RECENTE:
${context || 'Sem hist√≥rico anterior'}

DIRETRIZES:
1. Seja emp√°tico e acolhedor
2. Use t√©cnicas de aconselhamento apropriadas
3. Mantenha respostas concisas mas significativas
4. Se detectar sinais de crise, sugira buscar ajuda profissional
5. Adapte sua linguagem ao perfil do cliente
6. Foque no bem-estar emocional

Responda de forma personalizada e terap√™utica.`

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        temperature: 0.7,
        max_tokens: 300
      }),
    })

    const aiData = await response.json()
    const aiReply = aiData.choices[0].message.content

    // Salvar mensagem e resposta no Firebase do cliente
    const timestamp = new Date().toISOString()
    const conversationId = `${phoneNumber.replace(/\D/g, '')}_${Date.now()}`
    
    const conversationData = {
      id: conversationId,
      contact_name: contactName,
      contact_phone: phoneNumber,
      messages: [
        { sender: contactName, text: message, timestamp, ai_generated: false, sender_type: 'client' },
        { sender: 'assistant', text: aiReply, timestamp: new Date().toISOString(), ai_generated: true, sender_type: 'assistant' }
      ],
      created_at: timestamp,
      updated_at: new Date().toISOString(),
      ...(module === 'commercial' && {
        lead_status: 'active',
        sales_stage: 'engagement'
      })
    }

    // Salvar no Firebase do cliente
    const saveUrl = `${firebaseUrl}/conversations/${module}/${conversationId}.json?auth=${authToken}`
    
    console.log(`üíæ Salvando conversa no Firebase do cliente (${module})`)
    
    const saveResponse = await fetch(saveUrl, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(conversationData)
    })

    if (!saveResponse.ok) {
      console.error('Erro ao salvar no Firebase do cliente:', saveResponse.status)
    } else {
      console.log('‚úÖ Conversa salva no Firebase do cliente')
    }

    return new Response(JSON.stringify({
      success: true,
      reply: aiReply,
      conversation_id: conversationId,
      saved_to_client_firebase: saveResponse.ok
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })

  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})
