
export interface ParsedDocument {
  text: string;
  metadata: {
    fileName: string;
    fileType: string;
    fileSize: number;
    pageCount?: number;
  };
}

export async function parseDocument(file: File): Promise<ParsedDocument> {
  console.log(`üìÑ Analisando arquivo: ${file.name} (${file.type})`);

  const metadata = {
    fileName: file.name,
    fileType: file.type,
    fileSize: file.size,
  };

  // Verificar se √© arquivo de v√≠deo ou √°udio
  if (file.type.startsWith('video/') || file.type.startsWith('audio/')) {
    return {
      text: `[${file.type.startsWith('video/') ? 'V√çDEO' : '√ÅUDIO'}] ${file.name}

Este √© um arquivo de ${file.type.startsWith('video/') ? 'v√≠deo' : '√°udio'} que requer processamento especial.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tipo: ${file.type}
- Tamanho: ${(file.size / 1024 / 1024).toFixed(2)} MB

NOTA: Para analisar o conte√∫do deste ${file.type.startsWith('video/') ? 'v√≠deo' : '√°udio'}, seria necess√°rio:
1. Transcri√ß√£o autom√°tica do √°udio/v√≠deo
2. Processamento de IA para extrair insights
3. An√°lise do conte√∫do transcrito

Este arquivo foi carregado com sucesso e est√° pronto para an√°lise quando implementarmos as funcionalidades de transcri√ß√£o.`,
      metadata
    };
  }

  try {
    let text = '';

    if (file.type === 'text/plain' || file.name.endsWith('.txt')) {
      text = await file.text();
    } 
    else if (file.type === 'application/json' || file.name.endsWith('.json')) {
      const jsonContent = await file.text();
      const parsed = JSON.parse(jsonContent);
      text = JSON.stringify(parsed, null, 2);
    }
    else if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
      text = await file.text();
    }
    else if (file.name.endsWith('.md')) {
      text = await file.text();
    }
    else if (file.type === 'application/pdf' || file.name.endsWith('.pdf')) {
      // Para PDFs, vamos tentar uma abordagem completamente diferente
      text = await extractPDFTextContent(file);
    }
    else if (file.type.includes('word') || file.name.endsWith('.docx') || file.name.endsWith('.doc')) {
      text = await extractWordText(file);
    }
    else {
      try {
        text = await file.text();
      } catch (error) {
        text = `[ARQUIVO BIN√ÅRIO] ${file.name}

Este arquivo parece ser um formato bin√°rio que n√£o pode ser lido diretamente como texto.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tipo: ${file.type}
- Tamanho: ${(file.size / 1024).toFixed(2)} KB

SUGEST√ÉO: Tente converter o arquivo para um formato de texto (.txt, .md, .json) antes de fazer o upload.`;
      }
    }

    // Verificar se o texto extra√≠do √© v√°lido
    if (!text || text.trim().length < 10) {
      throw new Error('N√£o foi poss√≠vel extrair texto suficiente do arquivo');
    }

    // Limpar caracteres especiais e normalizar o texto
    text = cleanExtractedText(text);

    console.log(`‚úÖ Texto extra√≠do com sucesso: ${text.length} caracteres`);

    return {
      text,
      metadata: {
        ...metadata,
        pageCount: estimatePageCount(text)
      }
    };

  } catch (error) {
    console.error(`‚ùå Erro ao processar arquivo:`, error);
    throw new Error(`Falha ao processar o arquivo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
  }
}

async function extractPDFTextContent(file: File): Promise<string> {
  console.log('üîç Tentando extrair texto do PDF...');
  
  try {
    const arrayBuffer = await file.arrayBuffer();
    const uint8Array = new Uint8Array(arrayBuffer);
    
    // Converter para string usando UTF-8
    const decoder = new TextDecoder('utf-8', { ignoreBOM: true });
    let pdfString = '';
    
    try {
      pdfString = decoder.decode(uint8Array);
    } catch {
      // Se UTF-8 falhar, tentar latin1
      const latin1Decoder = new TextDecoder('latin1');
      pdfString = latin1Decoder.decode(uint8Array);
    }
    
    console.log('üìä Tamanho do conte√∫do PDF:', pdfString.length);
    
    let extractedText = '';
    
    // M√©todo 1: Extrair texto entre par√™nteses simples (mais comum)
    const simpleTextMatches = pdfString.match(/\(([^)]+)\)/g);
    if (simpleTextMatches) {
      console.log('üîç Encontrados', simpleTextMatches.length, 'textos simples');
      
      const textParts = [];
      for (const match of simpleTextMatches) {
        let text = match.slice(1, -1); // Remove os par√™nteses
        
        // Limpar e validar o texto
        text = cleanPDFText(text);
        
        if (isValidText(text)) {
          textParts.push(text);
        }
      }
      
      extractedText = textParts.join(' ');
    }
    
    // M√©todo 2: Se n√£o conseguiu texto suficiente, tentar padr√µes mais complexos
    if (extractedText.length < 100) {
      console.log('üîç Tentando extra√ß√£o avan√ßada...');
      
      // Procurar por comandos Tj (show text)
      const tjMatches = pdfString.match(/\(([^)]*)\)\s*Tj/gi);
      if (tjMatches) {
        const textParts = [];
        for (const match of tjMatches) {
          const textMatch = match.match(/\(([^)]*)\)/);
          if (textMatch) {
            let text = cleanPDFText(textMatch[1]);
            if (isValidText(text)) {
              textParts.push(text);
            }
          }
        }
        extractedText = textParts.join(' ');
      }
    }
    
    // M√©todo 3: Se ainda n√£o conseguiu, tentar arrays TJ
    if (extractedText.length < 100) {
      console.log('üîç Tentando extra√ß√£o de arrays TJ...');
      
      const tjArrayMatches = pdfString.match(/\[([^\]]*)\]\s*TJ/gi);
      if (tjArrayMatches) {
        const textParts = [];
        for (const match of tjArrayMatches) {
          const arrayContent = match.match(/\[([^\]]*)\]/);
          if (arrayContent) {
            const textMatches = arrayContent[1].match(/\(([^)]*)\)/g);
            if (textMatches) {
              for (const textMatch of textMatches) {
                let text = cleanPDFText(textMatch.slice(1, -1));
                if (isValidText(text)) {
                  textParts.push(text);
                }
              }
            }
          }
        }
        extractedText = textParts.join(' ');
      }
    }
    
    // Limpeza final
    extractedText = extractedText
      .replace(/\s+/g, ' ')
      .trim();
    
    console.log(`üìÑ Texto final extra√≠do: ${extractedText.length} caracteres`);
    
    // Se ainda n√£o conseguiu extrair texto leg√≠vel
    if (extractedText.length < 50 || !hasReadableContent(extractedText)) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel extrair texto leg√≠vel do PDF');
      return generatePDFPlaceholder(file);
    }
    
    return extractedText;
    
  } catch (error) {
    console.error('‚ùå Erro na extra√ß√£o de PDF:', error);
    return generatePDFPlaceholder(file);
  }
}

function cleanPDFText(text: string): string {
  return text
    // Decodificar escapes b√°sicos
    .replace(/\\n/g, ' ')
    .replace(/\\r/g, ' ')
    .replace(/\\t/g, ' ')
    .replace(/\\\(/g, '(')
    .replace(/\\\)/g, ')')
    .replace(/\\\\/g, '\\')
    // Remover caracteres de controle
    .replace(/[\x00-\x1F\x7F]/g, ' ')
    // Normalizar espa√ßos
    .replace(/\s+/g, ' ')
    .trim();
}

function isValidText(text: string): boolean {
  if (!text || text.length < 2) return false;
  
  // Filtrar comandos PDF comuns
  const pdfCommands = ['BT', 'ET', 'Tj', 'TJ', 'Td', 'TD', 'Tm', 'T*', 'Tf', 'TL'];
  if (pdfCommands.includes(text.trim())) return false;
  
  // Filtrar apenas n√∫meros ou coordenadas
  if (/^[\d\s\.\-]+$/.test(text)) return false;
  
  // Deve ter pelo menos algumas letras
  const letterCount = (text.match(/[a-zA-Z√Ä-√ø]/g) || []).length;
  return letterCount >= 2;
}

function hasReadableContent(text: string): boolean {
  // Verificar se tem conte√∫do leg√≠vel (n√£o s√≥ s√≠mbolos ou c√≥digos)
  const readableChars = text.match(/[a-zA-Z√Ä-√ø\s]/g) || [];
  const totalChars = text.length;
  
  // Pelo menos 70% deve ser leg√≠vel
  return (readableChars.length / totalChars) > 0.7;
}

function generatePDFPlaceholder(file: File): string {
  return `DOCUMENTO PDF: ${file.name}

‚ùå ATEN√á√ÉO: N√£o foi poss√≠vel extrair o texto deste PDF automaticamente.

POSS√çVEIS CAUSAS:
‚Ä¢ PDF criado a partir de imagem escaneada (precisa de OCR)
‚Ä¢ PDF com prote√ß√£o de c√≥pia
‚Ä¢ PDF com codifica√ß√£o especial
‚Ä¢ PDF com texto em formato gr√°fico

SOLU√á√ïES RECOMENDADAS:
1. üìÑ Copie o texto manualmente do PDF e cole em um arquivo .txt
2. üîÑ Converta o PDF para texto usando:
   ‚Ä¢ Adobe Reader (Arquivo > Exportar para > Texto)
   ‚Ä¢ Google Docs (upload + convers√£o autom√°tica)
   ‚Ä¢ Ferramentas online de PDF para texto
3. üì± Use OCR se for PDF escaneado

INFORMA√á√ïES DO ARQUIVO:
‚Ä¢ Nome: ${file.name}
‚Ä¢ Tamanho: ${(file.size / 1024).toFixed(1)} KB
‚Ä¢ Data: ${new Date().toLocaleDateString('pt-BR')}

üí° DICA: Para an√°lise eficaz, o arquivo precisa conter texto extra√≠vel. 
PDFs escaneados aparecem como imagens e precisam de OCR para extra√ß√£o de texto.`;
}

async function extractWordText(file: File): Promise<string> {
  try {
    const text = await file.text();
    return cleanExtractedText(text);
  } catch (error) {
    console.error('Erro na extra√ß√£o de Word:', error);
    return `[WORD] ${file.name}

Este √© um documento Word que requer processamento especial.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tamanho: ${(file.size / 1024).toFixed(2)} KB

SUGEST√ÉO: Para melhor an√°lise, converta o documento para formato .txt ou .md antes do upload.`;
  }
}

function cleanExtractedText(text: string): string {
  return text
    .replace(/\r\n/g, '\n')
    .replace(/\r/g, '\n')
    .replace(/\n{3,}/g, '\n\n')
    .replace(/\s{3,}/g, ' ')
    .trim();
}

function estimatePageCount(text: string): number {
  return Math.max(1, Math.ceil(text.length / 2000));
}
