
export interface ParsedDocument {
  text: string;
  metadata: {
    fileName: string;
    fileType: string;
    fileSize: number;
    pageCount?: number;
  };
}

export async function parseDocument(file: File): Promise<ParsedDocument> {
  console.log(`üìÑ Analisando arquivo: ${file.name} (${file.type})`);

  const metadata = {
    fileName: file.name,
    fileType: file.type,
    fileSize: file.size,
  };

  // Verificar se √© arquivo de v√≠deo ou √°udio
  if (file.type.startsWith('video/') || file.type.startsWith('audio/')) {
    return {
      text: `[${file.type.startsWith('video/') ? 'V√çDEO' : '√ÅUDIO'}] ${file.name}

Este √© um arquivo de ${file.type.startsWith('video/') ? 'v√≠deo' : '√°udio'} que requer processamento especial.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tipo: ${file.type}
- Tamanho: ${(file.size / 1024 / 1024).toFixed(2)} MB

NOTA: Para analisar o conte√∫do deste ${file.type.startsWith('video/') ? 'v√≠deo' : '√°udio'}, seria necess√°rio:
1. Transcri√ß√£o autom√°tica do √°udio/v√≠deo
2. Processamento de IA para extrair insights
3. An√°lise do conte√∫do transcrito

Este arquivo foi carregado com sucesso e est√° pronto para an√°lise quando implementarmos as funcionalidades de transcri√ß√£o.`,
      metadata
    };
  }

  try {
    let text = '';

    if (file.type === 'text/plain' || file.name.endsWith('.txt')) {
      text = await file.text();
    } 
    else if (file.type === 'application/json' || file.name.endsWith('.json')) {
      const jsonContent = await file.text();
      const parsed = JSON.parse(jsonContent);
      text = JSON.stringify(parsed, null, 2);
    }
    else if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
      text = await file.text();
    }
    else if (file.name.endsWith('.md')) {
      text = await file.text();
    }
    else if (file.type === 'application/pdf' || file.name.endsWith('.pdf')) {
      text = await extractPDFTextAdvanced(file);
    }
    else if (file.type.includes('word') || file.name.endsWith('.docx') || file.name.endsWith('.doc')) {
      text = await extractWordTextAdvanced(file);
    }
    else {
      try {
        text = await file.text();
      } catch (error) {
        text = `[ARQUIVO BIN√ÅRIO] ${file.name}

Este arquivo parece ser um formato bin√°rio que n√£o pode ser lido diretamente como texto.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tipo: ${file.type}
- Tamanho: ${(file.size / 1024).toFixed(2)} KB

SUGEST√ÉO: Tente converter o arquivo para um formato de texto (.txt, .md, .json) antes de fazer o upload.`;
      }
    }

    // Limpar e validar o texto extra√≠do
    text = cleanAndValidateText(text);

    // Verificar se o texto extra√≠do √© v√°lido
    if (!text || text.trim().length < 10) {
      throw new Error('N√£o foi poss√≠vel extrair texto suficiente do arquivo');
    }

    console.log(`‚úÖ Texto extra√≠do com sucesso: ${text.length} caracteres`);

    return {
      text,
      metadata: {
        ...metadata,
        pageCount: estimatePageCount(text)
      }
    };

  } catch (error) {
    console.error(`‚ùå Erro ao processar arquivo:`, error);
    throw new Error(`Falha ao processar o arquivo: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
  }
}

async function extractPDFTextAdvanced(file: File): Promise<string> {
  console.log('üîç Iniciando extra√ß√£o avan√ßada de PDF...');
  
  try {
    const arrayBuffer = await file.arrayBuffer();
    const uint8Array = new Uint8Array(arrayBuffer);
    
    // Tentar m√∫ltiplas codifica√ß√µes
    let pdfString = '';
    try {
      pdfString = new TextDecoder('utf-8').decode(uint8Array);
    } catch {
      try {
        pdfString = new TextDecoder('latin1').decode(uint8Array);
      } catch {
        pdfString = new TextDecoder('ascii').decode(uint8Array);
      }
    }
    
    console.log('üìä Tamanho do conte√∫do PDF:', pdfString.length);
    
    // Estrat√©gias m√∫ltiplas de extra√ß√£o
    let extractedText = '';
    
    // Estrat√©gia 1: Texto entre par√™nteses simples
    extractedText = extractTextFromPDFPatterns(pdfString, /\(([^)]+)\)/g);
    
    // Estrat√©gia 2: Se n√£o conseguiu texto suficiente, tentar comandos Tj
    if (extractedText.length < 100) {
      extractedText = extractTextFromPDFPatterns(pdfString, /\(([^)]*)\)\s*Tj/gi);
    }
    
    // Estrat√©gia 3: Arrays TJ
    if (extractedText.length < 100) {
      extractedText = extractTextFromPDFArrays(pdfString);
    }
    
    // Estrat√©gia 4: Busca por texto livre (√∫ltima tentativa)
    if (extractedText.length < 100) {
      extractedText = extractFreeTextFromPDF(pdfString);
    }
    
    // Limpeza final rigorosa
    extractedText = cleanPDFTextRigorously(extractedText);
    
    console.log(`üìÑ Texto final extra√≠do: ${extractedText.length} caracteres`);
    
    // Se ainda n√£o conseguiu extrair texto leg√≠vel
    if (extractedText.length < 50 || !isTextReadable(extractedText)) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel extrair texto leg√≠vel do PDF');
      return generatePDFPlaceholder(file);
    }
    
    return extractedText;
    
  } catch (error) {
    console.error('‚ùå Erro na extra√ß√£o de PDF:', error);
    return generatePDFPlaceholder(file);
  }
}

function extractTextFromPDFPatterns(pdfString: string, pattern: RegExp): string {
  const matches = pdfString.match(pattern);
  if (!matches) return '';
  
  const textParts = [];
  for (const match of matches) {
    const textMatch = match.match(/\(([^)]*)\)/);
    if (textMatch) {
      let text = cleanPDFTextBasic(textMatch[1]);
      if (isValidTextSegment(text)) {
        textParts.push(text);
      }
    }
  }
  
  return textParts.join(' ');
}

function extractTextFromPDFArrays(pdfString: string): string {
  const tjArrayMatches = pdfString.match(/\[([^\]]*)\]\s*TJ/gi);
  if (!tjArrayMatches) return '';
  
  const textParts = [];
  for (const match of tjArrayMatches) {
    const arrayContent = match.match(/\[([^\]]*)\]/);
    if (arrayContent) {
      const textMatches = arrayContent[1].match(/\(([^)]*)\)/g);
      if (textMatches) {
        for (const textMatch of textMatches) {
          let text = cleanPDFTextBasic(textMatch.slice(1, -1));
          if (isValidTextSegment(text)) {
            textParts.push(text);
          }
        }
      }
    }
  }
  
  return textParts.join(' ');
}

function extractFreeTextFromPDF(pdfString: string): string {
  // Procurar por sequ√™ncias de texto leg√≠vel
  const textMatches = pdfString.match(/[A-Za-z√Ä-√ø0-9\s\.,!?;:]{10,}/g);
  if (!textMatches) return '';
  
  const validTexts = textMatches
    .filter(text => isTextReadable(text))
    .filter(text => !isPDFCommand(text))
    .slice(0, 50); // Limitar para evitar excesso
  
  return validTexts.join(' ');
}

function cleanPDFTextBasic(text: string): string {
  return text
    .replace(/\\n/g, ' ')
    .replace(/\\r/g, ' ')
    .replace(/\\t/g, ' ')
    .replace(/\\\(/g, '(')
    .replace(/\\\)/g, ')')
    .replace(/\\\\/g, '\\')
    .replace(/[\x00-\x1F\x7F]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
}

function cleanPDFTextRigorously(text: string): string {
  return text
    // Remover c√≥digos de escape e caracteres de controle
    .replace(/\\[nrt]/g, ' ')
    .replace(/\\\([)]/g, '')
    .replace(/[\x00-\x1F\x7F-\x9F]/g, ' ')
    // Remover s√≠mbolos e caracteres especiais em excesso
    .replace(/[^\w\s√Ä-√ø\.,!?;:\-()]/g, ' ')
    // Remover sequ√™ncias de s√≠mbolos
    .replace(/[^\w\s]{3,}/g, ' ')
    // Normalizar espa√ßos
    .replace(/\s+/g, ' ')
    .trim();
}

function isValidTextSegment(text: string): boolean {
  if (!text || text.length < 2) return false;
  
  // Filtrar comandos PDF
  if (isPDFCommand(text)) return false;
  
  // Filtrar apenas n√∫meros ou coordenadas
  if (/^[\d\s\.\-]+$/.test(text)) return false;
  
  // Deve ter letras suficientes
  const letterCount = (text.match(/[a-zA-Z√Ä-√ø]/g) || []).length;
  return letterCount >= 2 && letterCount > text.length * 0.3;
}

function isPDFCommand(text: string): boolean {
  const pdfCommands = [
    'BT', 'ET', 'Tj', 'TJ', 'Td', 'TD', 'Tm', 'T*', 'Tf', 'TL',
    'obj', 'endobj', 'stream', 'endstream', 'xref', 'trailer',
    'startxref', 'PDF', 'Type', 'Font', 'Page', 'Kids', 'Parent'
  ];
  
  const cleanText = text.trim().toUpperCase();
  return pdfCommands.some(cmd => cleanText === cmd || cleanText.includes(cmd));
}

function isTextReadable(text: string): boolean {
  if (!text || text.length < 5) return false;
  
  // Verificar se tem conte√∫do leg√≠vel
  const readableChars = text.match(/[a-zA-Z√Ä-√ø0-9\s\.,!?;:]/g) || [];
  const totalChars = text.length;
  
  // Pelo menos 80% deve ser leg√≠vel
  return (readableChars.length / totalChars) > 0.8;
}

function generatePDFPlaceholder(file: File): string {
  return `DOCUMENTO PDF: ${file.name}

‚ùå ATEN√á√ÉO: N√£o foi poss√≠vel extrair o texto deste PDF automaticamente.

POSS√çVEIS CAUSAS:
‚Ä¢ PDF criado a partir de imagem escaneada (precisa de OCR)
‚Ä¢ PDF com prote√ß√£o de c√≥pia
‚Ä¢ PDF com codifica√ß√£o especial
‚Ä¢ PDF com texto em formato gr√°fico

SOLU√á√ïES RECOMENDADAS:
1. üìÑ Copie o texto manualmente do PDF e cole em um arquivo .txt
2. üîÑ Converta o PDF para texto usando:
   ‚Ä¢ Adobe Reader (Arquivo > Exportar para > Texto)
   ‚Ä¢ Google Docs (upload + convers√£o autom√°tica)
   ‚Ä¢ Ferramentas online de PDF para texto
3. üì± Use OCR se for PDF escaneado

INFORMA√á√ïES DO ARQUIVO:
‚Ä¢ Nome: ${file.name}
‚Ä¢ Tamanho: ${(file.size / 1024).toFixed(1)} KB
‚Ä¢ Data: ${new Date().toLocaleDateString('pt-BR')}

üí° DICA: Para an√°lise eficaz, o arquivo precisa conter texto extra√≠vel. 
PDFs escaneados aparecem como imagens e precisam de OCR para extra√ß√£o de texto.`;
}

async function extractWordTextAdvanced(file: File): Promise<string> {
  try {
    const arrayBuffer = await file.arrayBuffer();
    const uint8Array = new Uint8Array(arrayBuffer);
    
    // Tentar extrair texto de documento Word
    let text = '';
    
    try {
      // Tentar UTF-8 primeiro
      text = new TextDecoder('utf-8').decode(uint8Array);
    } catch {
      try {
        // Fallback para latin1
        text = new TextDecoder('latin1').decode(uint8Array);
      } catch {
        // √öltimo fallback
        text = new TextDecoder('ascii').decode(uint8Array);
      }
    }
    
    // Extrair texto leg√≠vel do conte√∫do Word
    const readableText = extractReadableTextFromWord(text);
    
    if (readableText && readableText.length > 50) {
      return readableText;
    }
    
    throw new Error('N√£o foi poss√≠vel extrair texto do documento Word');
    
  } catch (error) {
    console.error('Erro na extra√ß√£o de Word:', error);
    return `[DOCUMENTO WORD] ${file.name}

Este √© um documento Word que requer processamento especial.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tamanho: ${(file.size / 1024).toFixed(2)} KB

SUGEST√ïES PARA AN√ÅLISE:
1. üìÑ Copie o texto do documento e cole em um arquivo .txt
2. üîÑ Salve o documento como .txt no Word
3. üì§ Use Google Docs para converter automaticamente

NOTA: Documentos .docx s√£o arquivos compactados que precisam de processamento especial para extra√ß√£o de texto.`;
  }
}

function extractReadableTextFromWord(content: string): string {
  // Procurar por texto leg√≠vel no conte√∫do XML do Word
  const textMatches = content.match(/>([^<]{10,})</g);
  if (!textMatches) return '';
  
  const textParts = [];
  for (const match of textMatches) {
    const text = match.slice(1, -1); // Remove > e <
    if (isTextReadable(text) && !text.includes('xml') && !text.includes('docx')) {
      textParts.push(text.trim());
    }
  }
  
  return textParts.join(' ').replace(/\s+/g, ' ').trim();
}

function cleanAndValidateText(text: string): string {
  // Limpeza geral para todos os tipos de arquivo
  return text
    // Normalizar quebras de linha
    .replace(/\r\n/g, '\n')
    .replace(/\r/g, '\n')
    // Remover caracteres de controle problem√°ticos
    .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, ' ')
    // Remover sequ√™ncias excessivas de s√≠mbolos especiais
    .replace(/[^\w\s√Ä-√ø\.,!?;:\-()]{5,}/g, ' ')
    // Normalizar espa√ßos
    .replace(/\n{3,}/g, '\n\n')
    .replace(/\s{3,}/g, ' ')
    .trim();
}

function estimatePageCount(text: string): number {
  return Math.max(1, Math.ceil(text.length / 2000));
}
