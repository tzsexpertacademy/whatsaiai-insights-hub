
export interface ParsedDocument {
  text: string;
  metadata: {
    fileName: string;
    fileType: string;
    fileSize: number;
    pageCount?: number;
  };
}

export async function parseDocument(file: File): Promise<ParsedDocument> {
  console.log(`üìÑ Analisando arquivo: ${file.name} (${file.type})`);

  const metadata = {
    fileName: file.name,
    fileType: file.type || getFileTypeFromExtension(file.name),
    fileSize: file.size,
  };

  // Verificar se √© arquivo de v√≠deo ou √°udio
  if (file.type.startsWith('video/') || file.type.startsWith('audio/')) {
    return {
      text: `[${file.type.startsWith('video/') ? 'V√çDEO' : '√ÅUDIO'}] ${file.name}

Este √© um arquivo de ${file.type.startsWith('video/') ? 'v√≠deo' : '√°udio'} que requer processamento especial.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tipo: ${file.type}
- Tamanho: ${(file.size / 1024 / 1024).toFixed(2)} MB

NOTA: Para analisar o conte√∫do deste ${file.type.startsWith('video/') ? 'v√≠deo' : '√°udio'}, seria necess√°rio:
1. Transcri√ß√£o autom√°tica do √°udio/v√≠deo
2. Processamento de IA para extrair insights
3. An√°lise do conte√∫do transcrito

Este arquivo foi carregado com sucesso e est√° pronto para an√°lise quando implementarmos as funcionalidades de transcri√ß√£o.`,
      metadata
    };
  }

  try {
    let text = '';
    const fileExtension = getFileExtension(file.name).toLowerCase();
    const actualFileType = file.type || getFileTypeFromExtension(file.name);

    console.log(`üîç Processando arquivo: ${file.name}, extens√£o: ${fileExtension}, tipo: ${actualFileType}`);

    // Arquivos de texto simples (.txt, .md)
    if (actualFileType === 'text/plain' || fileExtension === 'txt' || fileExtension === 'md' || fileExtension === 'markdown') {
      console.log('üìù Processando como arquivo de texto...');
      const rawText = await file.text();
      
      if (!rawText || rawText.trim().length === 0) {
        throw new Error('Arquivo de texto est√° vazio');
      }
      
      text = `DOCUMENTO DE TEXTO: ${file.name}

CONTE√öDO:
${rawText.trim()}`;
      
      console.log(`‚úÖ Arquivo de texto processado: ${text.length} caracteres`);
    }
    
    // Arquivos JSON
    else if (actualFileType === 'application/json' || fileExtension === 'json') {
      console.log('üìä Processando como JSON...');
      const jsonContent = await file.text();
      
      if (!jsonContent || jsonContent.trim().length === 0) {
        throw new Error('Arquivo JSON est√° vazio');
      }
      
      try {
        const parsed = JSON.parse(jsonContent);
        text = `ARQUIVO JSON: ${file.name}

ESTRUTURA E DADOS:
${JSON.stringify(parsed, null, 2)}`;
      } catch (jsonError) {
        text = `ARQUIVO JSON (formato texto): ${file.name}

CONTE√öDO:
${jsonContent}`;
      }
      
      console.log(`‚úÖ Arquivo JSON processado: ${text.length} caracteres`);
    }
    
    // Arquivos CSV
    else if (actualFileType === 'text/csv' || fileExtension === 'csv') {
      console.log('üìà Processando como CSV...');
      const csvContent = await file.text();
      
      if (!csvContent || csvContent.trim().length === 0) {
        throw new Error('Arquivo CSV est√° vazio');
      }
      
      text = formatCSVContent(csvContent, file.name);
      console.log(`‚úÖ Arquivo CSV processado: ${text.length} caracteres`);
    }
    
    // Arquivos XML
    else if (actualFileType === 'application/xml' || actualFileType === 'text/xml' || fileExtension === 'xml') {
      console.log('üîñ Processando como XML...');
      const xmlContent = await file.text();
      
      if (!xmlContent || xmlContent.trim().length === 0) {
        throw new Error('Arquivo XML est√° vazio');
      }
      
      text = formatXMLContent(xmlContent, file.name);
      console.log(`‚úÖ Arquivo XML processado: ${text.length} caracteres`);
    }
    
    // Arquivos Excel
    else if (isExcelFile(actualFileType, fileExtension)) {
      console.log('üìä Processando como Excel...');
      text = await extractExcelContent(file);
      console.log(`‚úÖ Arquivo Excel processado: ${text.length} caracteres`);
    }
    
    // Arquivos PDF
    else if (actualFileType === 'application/pdf' || fileExtension === 'pdf') {
      console.log('üìÑ Processando como PDF...');
      text = await extractPDFText(file);
      console.log(`‚úÖ Arquivo PDF processado: ${text.length} caracteres`);
    }
    
    // Arquivos Word
    else if (isWordFile(actualFileType, fileExtension)) {
      console.log('üìù Processando como Word...');
      text = await extractWordText(file);
      console.log(`‚úÖ Arquivo Word processado: ${text.length} caracteres`);
    }
    
    // Tentar processar como texto gen√©rico
    else {
      console.log('‚ùì Tentando processar como texto gen√©rico...');
      try {
        const textContent = await file.text();
        
        if (!textContent || textContent.trim().length === 0) {
          throw new Error('Arquivo est√° vazio');
        }
        
        if (isValidTextContent(textContent)) {
          text = `ARQUIVO DE TEXTO: ${file.name}

CONTE√öDO:
${textContent.trim()}`;
          console.log(`‚úÖ Arquivo processado como texto gen√©rico: ${text.length} caracteres`);
        } else {
          throw new Error('Conte√∫do n√£o √© texto v√°lido');
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è N√£o foi poss√≠vel processar como texto, gerando mensagem informativa`);
        text = generateUnsupportedFileMessage(file);
      }
    }

    // Valida√ß√£o final do texto extra√≠do
    if (!text || text.trim().length < 10) {
      throw new Error('N√£o foi poss√≠vel extrair conte√∫do suficiente do arquivo');
    }

    // Limpeza final do texto
    text = cleanExtractedText(text);

    console.log(`‚úÖ Processamento conclu√≠do com sucesso: ${text.length} caracteres extra√≠dos`);

    return {
      text,
      metadata: {
        ...metadata,
        fileType: actualFileType,
        pageCount: estimatePageCount(text)
      }
    };

  } catch (error) {
    console.error(`‚ùå Erro ao processar arquivo ${file.name}:`, error);
    
    // Tentativa de fallback como texto simples
    try {
      console.log(`üîÑ Tentando fallback como texto simples...`);
      const fallbackText = await file.text();
      
      if (fallbackText && fallbackText.trim().length > 0) {
        const processedText = `ARQUIVO PROCESSADO (FALLBACK): ${file.name}

CONTE√öDO EXTRA√çDO:
${fallbackText.trim()}`;
        
        console.log(`‚úÖ Fallback bem-sucedido: ${processedText.length} caracteres`);
        
        return {
          text: cleanExtractedText(processedText),
          metadata: {
            ...metadata,
            pageCount: estimatePageCount(processedText)
          }
        };
      }
    } catch (fallbackError) {
      console.error(`‚ùå Fallback tamb√©m falhou:`, fallbackError);
    }
    
    throw new Error(`Falha ao processar o arquivo ${file.name}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
  }
}

function getFileExtension(fileName: string): string {
  const lastDot = fileName.lastIndexOf('.');
  return lastDot === -1 ? '' : fileName.substring(lastDot + 1);
}

function getFileTypeFromExtension(fileName: string): string {
  const extension = getFileExtension(fileName).toLowerCase();
  
  const typeMap: { [key: string]: string } = {
    'txt': 'text/plain',
    'json': 'application/json',
    'csv': 'text/csv',
    'md': 'text/markdown',
    'markdown': 'text/markdown',
    'pdf': 'application/pdf',
    'doc': 'application/msword',
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'xls': 'application/vnd.ms-excel',
    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'xml': 'application/xml',
    'mp4': 'video/mp4',
    'avi': 'video/avi',
    'mov': 'video/quicktime',
    'mp3': 'audio/mpeg',
    'wav': 'audio/wav',
    'm4a': 'audio/mp4',
    'flac': 'audio/flac'
  };
  
  return typeMap[extension] || 'text/plain';
}

function isExcelFile(fileType: string, extension: string): boolean {
  return fileType.includes('excel') || 
         fileType.includes('spreadsheetml') ||
         extension === 'xls' || 
         extension === 'xlsx';
}

function isWordFile(fileType: string, extension: string): boolean {
  return fileType.includes('word') || 
         fileType.includes('wordprocessingml') ||
         extension === 'doc' || 
         extension === 'docx';
}

async function extractPDFText(file: File): Promise<string> {
  try {
    console.log('üîç Tentando extrair texto do PDF...');
    
    // Converter arquivo para ArrayBuffer
    const arrayBuffer = await file.arrayBuffer();
    console.log(`üìä PDF carregado: ${arrayBuffer.byteLength} bytes`);
    
    // Tentar diferentes codifica√ß√µes para extrair texto
    const strategies = [
      () => extractWithUTF8(arrayBuffer),
      () => extractWithLatin1(arrayBuffer),
      () => extractWithWindows1252(arrayBuffer)
    ];
    
    for (let i = 0; i < strategies.length; i++) {
      try {
        console.log(`üîÑ Tentativa ${i + 1} de extra√ß√£o de PDF...`);
        const extractedText = strategies[i]();
        
        if (extractedText && extractedText.length > 50) {
          const cleanText = cleanPDFText(extractedText);
          
          if (isValidExtractedText(cleanText)) {
            console.log(`‚úÖ PDF extra√≠do com sucesso na tentativa ${i + 1}`);
            return `DOCUMENTO PDF: ${file.name}

CONTE√öDO EXTRA√çDO:
${cleanText}`;
          }
        }
      } catch (strategyError) {
        console.log(`‚ö†Ô∏è Estrat√©gia ${i + 1} falhou:`, strategyError);
        continue;
      }
    }
    
    // Se chegou aqui, n√£o conseguiu extrair texto v√°lido
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel extrair texto leg√≠vel do PDF');
    return generatePDFPlaceholder(file);
    
  } catch (error) {
    console.error('‚ùå Erro na extra√ß√£o de PDF:', error);
    return generatePDFPlaceholder(file);
  }
}

function extractWithUTF8(arrayBuffer: ArrayBuffer): string {
  return new TextDecoder('utf-8', { fatal: false }).decode(arrayBuffer);
}

function extractWithLatin1(arrayBuffer: ArrayBuffer): string {
  return new TextDecoder('latin1', { fatal: false }).decode(arrayBuffer);
}

function extractWithWindows1252(arrayBuffer: ArrayBuffer): string {
  return new TextDecoder('windows-1252', { fatal: false }).decode(arrayBuffer);
}

function cleanPDFText(text: string): string {
  console.log('üßπ Limpando texto extra√≠do do PDF...');
  
  // Extrair apenas sequ√™ncias de texto leg√≠vel
  const textPattern = /[a-zA-Z√Ä-√ø0-9\s\.,!?;:\-()%$‚Ç¨¬£¬•]+/g;
  const matches = text.match(textPattern);
  
  if (!matches) {
    return '';
  }
  
  // Filtrar e limpar matches
  const cleanedMatches = matches
    .filter(match => match.trim().length > 3)
    .filter(match => /[a-zA-Z√Ä-√ø]/.test(match)) // Deve ter pelo menos uma letra
    .filter(match => {
      // Filtrar sequ√™ncias que s√£o principalmente n√∫meros/s√≠mbolos
      const letterCount = (match.match(/[a-zA-Z√Ä-√ø]/g) || []).length;
      return letterCount > match.length * 0.3;
    })
    .map(match => match.trim())
    .filter(match => match.length > 0);
  
  const result = cleanedMatches.join(' ').substring(0, 5000);
  console.log(`‚úÇÔ∏è Texto limpo: ${result.length} caracteres`);
  
  return result;
}

function isValidExtractedText(text: string): boolean {
  if (!text || text.length < 20) return false;
  
  // Verificar se tem palavras reais (n√£o apenas s√≠mbolos)
  const words = text.split(/\s+/).filter(word => 
    word.length > 2 && /[a-zA-Z√Ä-√ø]/.test(word)
  );
  
  return words.length >= 5;
}

async function extractWordText(file: File): Promise<string> {
  try {
    console.log('üìù Tentando extrair texto do Word...');
    
    const arrayBuffer = await file.arrayBuffer();
    const text = new TextDecoder('utf-8', { fatal: false }).decode(arrayBuffer);
    
    // Extrair texto leg√≠vel do Word
    const cleanText = extractReadableTextFromBinary(text);
    
    if (cleanText && isValidExtractedText(cleanText)) {
      return `DOCUMENTO WORD: ${file.name}

CONTE√öDO EXTRA√çDO:
${cleanText}`;
    } else {
      return generateWordPlaceholder(file);
    }
  } catch (error) {
    console.error('‚ùå Erro ao extrair Word:', error);
    return generateWordPlaceholder(file);
  }
}

async function extractExcelContent(file: File): Promise<string> {
  try {
    console.log('üìä Tentando extrair conte√∫do do Excel...');
    
    const arrayBuffer = await file.arrayBuffer();
    const text = new TextDecoder('utf-8', { fatal: false }).decode(arrayBuffer);
    
    // Extrair texto leg√≠vel do Excel
    const readableText = extractReadableTextFromBinary(text);
    
    if (readableText && readableText.length > 20) {
      return `PLANILHA EXCEL: ${file.name}

DADOS EXTRA√çDOS:
${readableText}`;
    } else {
      return generateExcelPlaceholder(file);
    }
  } catch (error) {
    console.error('‚ùå Erro ao extrair Excel:', error);
    return generateExcelPlaceholder(file);
  }
}

function extractReadableTextFromBinary(binaryText: string): string {
  console.log('üîç Extraindo texto leg√≠vel de arquivo bin√°rio...');
  
  // Padr√£o mais espec√≠fico para extrair texto √∫til
  const textMatches = binaryText.match(/[a-zA-Z√Ä-√ø][a-zA-Z√Ä-√ø0-9\s\.,!?;:\-()%$‚Ç¨¬£¬•]{8,}/g);
  
  if (!textMatches) {
    console.log('‚ùå Nenhum texto leg√≠vel encontrado');
    return '';
  }
  
  const filteredMatches = textMatches
    .filter(match => {
      const trimmed = match.trim();
      // Deve ter pelo menos 5 caracteres e pelo menos 30% de letras
      if (trimmed.length < 5) return false;
      
      const letterCount = (trimmed.match(/[a-zA-Z√Ä-√ø]/g) || []).length;
      return letterCount > trimmed.length * 0.3;
    })
    .slice(0, 100) // Limitar quantidade
    .join('\n')
    .substring(0, 3000); // Limitar tamanho
  
  console.log(`‚úÖ Texto extra√≠do: ${filteredMatches.length} caracteres`);
  return filteredMatches;
}

function formatCSVContent(csvContent: string, fileName: string): string {
  const lines = csvContent.split('\n').filter(line => line.trim().length > 0);
  
  if (lines.length === 0) {
    return `PLANILHA CSV VAZIA: ${fileName}`;
  }
  
  const header = lines[0];
  const dataLines = lines.slice(1, 21); // Primeiras 20 linhas de dados
  
  let result = `PLANILHA CSV: ${fileName}

CABE√áALHO:
${header}

DADOS:
`;
  
  dataLines.forEach((line, index) => {
    result += `Linha ${index + 1}: ${line}\n`;
  });
  
  if (lines.length > 21) {
    result += `\n[... mais ${lines.length - 21} linhas dispon√≠veis ...]`;
  }
  
  return result;
}

function formatXMLContent(xmlContent: string, fileName: string): string {
  // Extrair texto de tags XML de forma simples
  const textContent = xmlContent
    .replace(/<[^>]*>/g, ' ') // Remove tags
    .replace(/\s+/g, ' ') // Normaliza espa√ßos
    .trim();
    
  return `ARQUIVO XML: ${fileName}

CONTE√öDO EXTRA√çDO:
${textContent.substring(0, 2000)}${textContent.length > 2000 ? '...' : ''}`;
}

function isValidTextContent(content: string): boolean {
  if (!content || content.length < 3) return false;
  
  // Verificar se tem caracteres leg√≠veis suficientes
  const readableChars = content.match(/[a-zA-Z√Ä-√ø0-9\s\.,!?;:\-()]/g);
  if (!readableChars) return false;
  
  const readableRatio = readableChars.length / content.length;
  return readableRatio > 0.5;
}

function cleanExtractedText(text: string): string {
  return text
    // Normalizar quebras de linha
    .replace(/\r\n/g, '\n')
    .replace(/\r/g, '\n')
    
    // Remover caracteres de controle, mas manter quebras de linha
    .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, ' ')
    
    // Normalizar espa√ßos m√∫ltiplos
    .replace(/[ \t]+/g, ' ')
    .replace(/\n{3,}/g, '\n\n')
    
    // Trim geral
    .trim();
}

function estimatePageCount(text: string): number {
  return Math.max(1, Math.ceil(text.length / 2000));
}

function generatePDFPlaceholder(file: File): string {
  return `DOCUMENTO PDF: ${file.name}

Este arquivo PDF foi carregado mas o texto n√£o p√¥de ser extra√≠do automaticamente.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tamanho: ${(file.size / 1024).toFixed(1)} KB
- Formato: PDF

POSS√çVEIS CAUSAS:
1. PDF escaneado (imagem) - requer OCR
2. PDF protegido ou criptografado
3. Formato PDF n√£o padr√£o

SOLU√á√ïES RECOMENDADAS:
1. üìã Copie o texto diretamente do PDF e cole aqui
2. üíæ Salve o PDF como arquivo de texto (.txt)
3. üîÑ Use ferramentas de OCR se for PDF escaneado

O arquivo foi registrado e est√° pronto para an√°lise quando o texto for fornecido de outra forma.`;
}

function generateWordPlaceholder(file: File): string {
  return `DOCUMENTO WORD: ${file.name}

Este arquivo Word foi carregado mas o conte√∫do n√£o p√¥de ser extra√≠do automaticamente.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tamanho: ${(file.size / 1024).toFixed(1)} KB
- Formato: Microsoft Word

SOLU√á√ïES RECOMENDADAS:
1. üìÑ Abra o documento e salve como arquivo de texto (.txt)
2. üìã Copie o conte√∫do diretamente do Word e cole aqui
3. üîÑ Exporte para formato de texto simples

O arquivo foi registrado e est√° pronto para an√°lise quando o conte√∫do for fornecido em formato de texto.`;
}

function generateExcelPlaceholder(file: File): string {
  return `PLANILHA EXCEL: ${file.name}

Esta planilha Excel foi carregada mas os dados n√£o puderam ser extra√≠dos automaticamente.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tamanho: ${(file.size / 1024).toFixed(1)} KB
- Formato: Excel

SOLU√á√ïES RECOMENDADAS:
1. üìä Exporte a planilha como CSV
2. üìã Copie os dados espec√≠ficos que deseja analisar
3. üìÑ Salve as abas importantes como arquivos de texto

O arquivo foi registrado e est√° pronto para an√°lise quando os dados forem fornecidos em formato compat√≠vel.`;
}

function generateUnsupportedFileMessage(file: File): string {
  return `ARQUIVO: ${file.name}

Este arquivo est√° em um formato que requer processamento especial.

INFORMA√á√ïES DO ARQUIVO:
- Nome: ${file.name}
- Tipo: ${file.type || 'Desconhecido'}
- Tamanho: ${(file.size / 1024).toFixed(1)} KB

FORMATOS TOTALMENTE SUPORTADOS:
üìÑ Textos: .txt, .md, .json, .csv, .xml
üìä Planilhas: .csv (recomendado)
üìã Documentos: .txt (recomendado)

FORMATOS COM SUPORTE LIMITADO:
üìÑ .pdf, .doc, .docx, .xls, .xlsx
üé• V√≠deos: .mp4, .avi, .mov
üéµ √Åudios: .mp3, .wav, .m4a, .flac

RECOMENDA√á√ÉO:
Para melhor an√°lise, converta seu arquivo para formato de texto (.txt) ou CSV (.csv).

O arquivo foi registrado e pode ser processado quando convertido para formato compat√≠vel.`;
}
