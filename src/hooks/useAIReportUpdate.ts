
import { useState } from 'react';
import { useClientConfig } from '@/contexts/ClientConfigContext';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

export function useAIReportUpdate() {
  const [isUpdating, setIsUpdating] = useState(false);
  const { config } = useClientConfig();
  const { user } = useAuth();
  const { toast } = useToast();

  const updateReport = async () => {
    if (!user?.id) {
      toast({
        title: "Erro de autentica√ß√£o",
        description: "Voc√™ precisa estar logado para atualizar o relat√≥rio",
        variant: "destructive"
      });
      return;
    }

    if (!config.openai.apiKey) {
      toast({
        title: "Configura√ß√£o necess√°ria",
        description: "Configure sua chave OpenAI antes de atualizar o relat√≥rio",
        variant: "destructive"
      });
      return;
    }

    if (!config.openai.apiKey.startsWith('sk-')) {
      toast({
        title: "Chave inv√°lida",
        description: "A chave OpenAI deve come√ßar com 'sk-'",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsUpdating(true);
      console.log('üîÑ Iniciando atualiza√ß√£o do relat√≥rio com IA...');

      // Chamar edge function para an√°lise por IA
      const { data, error } = await supabase.functions.invoke('analyze-conversation', {
        body: { 
          userId: user.id,
          openaiApiKey: config.openai.apiKey,
          model: config.openai.model || 'gpt-4o-mini',
          temperature: config.openai.temperature || 0.7,
          maxTokens: config.openai.maxTokens || 1000
        }
      });

      if (error) {
        console.error('‚ùå Erro na edge function:', error);
        throw error;
      }

      console.log('‚úÖ Resposta da IA:', data);

      toast({
        title: "Relat√≥rio atualizado",
        description: "An√°lise por IA conclu√≠da com sucesso. A p√°gina ser√° recarregada para mostrar os novos dados.",
      });

      console.log('‚úÖ Relat√≥rio atualizado com sucesso');
      
      // Recarregar a p√°gina ap√≥s um pequeno delay para mostrar o toast
      setTimeout(() => {
        window.location.reload();
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar relat√≥rio:', error);
      toast({
        title: "Erro na atualiza√ß√£o",
        description: "N√£o foi poss√≠vel atualizar o relat√≥rio. Verifique suas configura√ß√µes.",
        variant: "destructive"
      });
    } finally {
      setIsUpdating(false);
    }
  };

  return {
    updateReport,
    isUpdating
  };
}
