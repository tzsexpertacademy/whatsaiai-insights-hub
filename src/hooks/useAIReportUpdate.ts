
import { useState } from 'react';
import { useClientConfig } from '@/contexts/ClientConfigContext';
import { useToast } from '@/hooks/use-toast';

export function useAIReportUpdate() {
  const [isUpdating, setIsUpdating] = useState(false);
  const { config } = useClientConfig();
  const { toast } = useToast();

  const updateReport = async () => {
    if (!config.openai.apiKey) {
      toast({
        title: "Configura√ß√£o necess√°ria",
        description: "Configure sua chave OpenAI antes de atualizar o relat√≥rio",
        variant: "destructive"
      });
      return;
    }

    if (!config.openai.apiKey.startsWith('sk-')) {
      toast({
        title: "Chave inv√°lida",
        description: "A chave OpenAI deve come√ßar com 'sk-'",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsUpdating(true);
      console.log('üîÑ Iniciando atualiza√ß√£o do relat√≥rio com IA...');

      // Simular chamada para API de an√°lise
      // Em uma implementa√ß√£o real, voc√™ faria uma chamada para sua edge function
      await new Promise(resolve => setTimeout(resolve, 2000));

      // For√ßar re-render dos componentes de dashboard
      window.dispatchEvent(new CustomEvent('ai-analysis-complete'));

      toast({
        title: "Relat√≥rio atualizado",
        description: "An√°lise por IA conclu√≠da com sucesso",
      });

      console.log('‚úÖ Relat√≥rio atualizado com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar relat√≥rio:', error);
      toast({
        title: "Erro na atualiza√ß√£o",
        description: "N√£o foi poss√≠vel atualizar o relat√≥rio",
        variant: "destructive"
      });
    } finally {
      setIsUpdating(false);
    }
  };

  return {
    updateReport,
    isUpdating
  };
}
