
import { useState, useEffect, useCallback } from 'react';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';

export interface NotificationConfig {
  id: string;
  title: string;
  message: string;
  time: string; // formato HH:MM
  enabled: boolean;
  type: 'daily' | 'custom' | 'trial';
  createdAt: Date;
}

const defaultNotifications: NotificationConfig[] = [
  {
    id: 'morning-planning',
    title: 'üåÖ Bom dia! Hora de planejar',
    message: 'Que tal compartilhar sua programa√ß√£o do dia com seu assistente? Isso me ajuda a te apoiar melhor!',
    time: '06:00',
    enabled: true,
    type: 'daily',
    createdAt: new Date()
  },
  {
    id: 'midday-checkin',
    title: '‚òÄÔ∏è Como foi sua manh√£?',
    message: 'J√° passou da metade do dia! Como foi sua manh√£? Compartilhe comigo para eu te ajudar a otimizar sua tarde.',
    time: '12:00',
    enabled: true,
    type: 'daily',
    createdAt: new Date()
  },
  {
    id: 'afternoon-review',
    title: 'üå§Ô∏è Revis√£o da tarde',
    message: 'Como foi sua tarde e seu dia at√© agora? Me conte para eu poder te dar insights personalizados!',
    time: '18:00',
    enabled: true,
    type: 'daily',
    createdAt: new Date()
  },
  {
    id: 'goodnight',
    title: 'üåô Boa noite!',
    message: 'Finalizando o dia... Se quiser compartilhar mais alguma coisa ou refletir sobre hoje, estou aqui para te ajudar!',
    time: '21:00',
    enabled: true,
    type: 'daily',
    createdAt: new Date()
  }
];

export function useNotifications() {
  const [notifications, setNotifications] = useState<NotificationConfig[]>([]);
  const [permission, setPermission] = useState<NotificationPermission>('default');
  const { user, createCheckout } = useAuth();

  // Fun√ß√£o para verificar se o usu√°rio est√° em per√≠odo de trial
  const isInTrialPeriod = useCallback(() => {
    if (!user?.subscribed || !user?.subscriptionEnd) return false;
    
    const trialEnd = new Date(user.subscriptionEnd);
    const now = new Date();
    return now <= trialEnd;
  }, [user]);

  // Fun√ß√£o para calcular dias restantes do trial
  const getTrialDaysRemaining = useCallback(() => {
    if (!user?.subscriptionEnd) return 0;
    
    const trialEnd = new Date(user.subscriptionEnd);
    const now = new Date();
    const diffTime = trialEnd.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return Math.max(0, diffDays);
  }, [user]);

  // Criar notifica√ß√£o de trial
  const createTrialNotification = useCallback(() => {
    const daysRemaining = getTrialDaysRemaining();
    
    if (daysRemaining <= 0) return null;

    return {
      id: 'trial-reminder',
      title: `‚è∞ Trial: ${daysRemaining} dias restantes`,
      message: `Voc√™ tem ${daysRemaining} dias restantes do seu trial gratuito! Garante acesso cont√≠nuo √†s suas an√°lises assinando agora por apenas R$ 47/m√™s.`,
      time: '10:00',
      enabled: true,
      type: 'trial' as const,
      createdAt: new Date()
    };
  }, [getTrialDaysRemaining]);

  // Carregar notifica√ß√µes do localStorage
  useEffect(() => {
    console.log('üîî Carregando notifica√ß√µes do localStorage...');
    const saved = localStorage.getItem('user-notifications');
    let loadedNotifications = defaultNotifications;
    
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        loadedNotifications = parsed.map((n: any) => ({
          ...n,
          createdAt: new Date(n.createdAt)
        }));
        console.log('üìã Notifica√ß√µes carregadas:', loadedNotifications);
      } catch (error) {
        console.error('‚ùå Erro ao carregar notifica√ß√µes:', error);
        loadedNotifications = defaultNotifications;
      }
    } else {
      console.log('üìù Usando notifica√ß√µes padr√£o');
    }

    // Adicionar notifica√ß√£o de trial se o usu√°rio estiver em per√≠odo de teste
    if (isInTrialPeriod()) {
      const trialNotification = createTrialNotification();
      if (trialNotification) {
        // Remover notifica√ß√£o de trial existente
        loadedNotifications = loadedNotifications.filter(n => n.type !== 'trial');
        // Adicionar nova notifica√ß√£o de trial
        loadedNotifications.push(trialNotification);
        console.log('üìÖ Adicionada notifica√ß√£o de trial:', trialNotification);
      }
    } else {
      // Remover notifica√ß√µes de trial se n√£o estiver mais em trial
      loadedNotifications = loadedNotifications.filter(n => n.type !== 'trial');
    }

    setNotifications(loadedNotifications);
  }, [isInTrialPeriod, createTrialNotification]);

  // Salvar notifica√ß√µes no localStorage
  const saveNotifications = useCallback((newNotifications: NotificationConfig[]) => {
    console.log('üíæ Salvando notifica√ß√µes:', newNotifications);
    localStorage.setItem('user-notifications', JSON.stringify(newNotifications));
    setNotifications(newNotifications);
  }, []);

  // Solicitar permiss√£o para notifica√ß√µes com fallback aprimorado
  const requestPermission = useCallback(async () => {
    console.log('üîî Solicitando permiss√£o para notifica√ß√µes...');
    
    if (!('Notification' in window)) {
      console.warn('‚ö†Ô∏è Este navegador n√£o suporta notifica√ß√µes');
      toast({
        title: "Navegador n√£o suportado",
        description: "Seu navegador n√£o suporta notifica√ß√µes push. Tente usar Chrome, Firefox ou Safari atualizado.",
        variant: "destructive"
      });
      return false;
    }

    try {
      // Primeiro, verificar se j√° temos permiss√£o
      if (Notification.permission === 'granted') {
        console.log('‚úÖ Permiss√£o j√° concedida');
        setPermission('granted');
        return true;
      }

      // Se for 'denied', informar que precisa ser feito manualmente
      if (Notification.permission === 'denied') {
        console.log('‚ùå Permiss√£o negada - precisa habilitar manualmente');
        setPermission('denied');
        toast({
          title: "Permiss√£o bloqueada",
          description: "As notifica√ß√µes foram bloqueadas. Voc√™ precisa habilit√°-las manualmente nas configura√ß√µes do navegador.",
          variant: "destructive",
          duration: 10000
        });
        return false;
      }

      // Solicitar permiss√£o
      console.log('üôã Solicitando permiss√£o...');
      const result = await Notification.requestPermission();
      console.log('üìù Resultado da solicita√ß√£o:', result);
      setPermission(result);
      
      if (result === 'granted') {
        console.log('üéâ Permiss√£o concedida! Testando notifica√ß√£o...');
        
        // Testar notifica√ß√£o imediatamente
        try {
          const testNotification = new Notification('üéâ Notifica√ß√µes Ativadas!', {
            body: 'Agora voc√™ receber√° lembretes personalizados. Clique aqui para ir ao chat.',
            icon: '/favicon.ico',
            badge: '/favicon.ico',
            tag: 'permission-granted-test',
            requireInteraction: false,
            silent: false
          });
          
          testNotification.onclick = () => {
            console.log('üñ±Ô∏è Clique na notifica√ß√£o de teste - redirecionando');
            window.focus();
            window.location.href = '/dashboard/chat';
            testNotification.close();
          };
          
          // Auto-fechar ap√≥s 5 segundos
          setTimeout(() => {
            testNotification.close();
          }, 5000);
          
          toast({
            title: "Notifica√ß√µes ativadas!",
            description: "Voc√™ deveria ter visto uma notifica√ß√£o de teste agora.",
            duration: 5000
          });
          
        } catch (notificationError) {
          console.error('‚ùå Erro ao criar notifica√ß√£o de teste:', notificationError);
          toast({
            title: "Permiss√£o concedida",
            description: "Permiss√£o concedida, mas houve um problema ao testar. Tente o bot√£o 'Testar' na p√°gina.",
            variant: "destructive"
          });
        }
        
        return true;
      } else {
        console.log('‚ùå Permiss√£o negada pelo usu√°rio');
        toast({
          title: "Permiss√£o negada",
          description: "Voc√™ negou a permiss√£o. Para ativar, siga as instru√ß√µes abaixo para habilitar manualmente.",
          variant: "destructive",
          duration: 8000
        });
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao solicitar permiss√£o:', error);
      toast({
        title: "Erro ao solicitar permiss√£o",
        description: "Houve um problema ao solicitar permiss√£o. Tente habilitar manualmente nas configura√ß√µes.",
        variant: "destructive"
      });
      return false;
    }
  }, []);

  // Verificar permiss√£o atual
  useEffect(() => {
    if ('Notification' in window) {
      const currentPermission = Notification.permission;
      console.log('üîç Permiss√£o atual:', currentPermission);
      setPermission(currentPermission);
    } else {
      console.warn('‚ö†Ô∏è Notifica√ß√µes n√£o suportadas neste navegador');
    }
  }, []);

  // Fun√ß√£o melhorada para mostrar notifica√ß√£o
  const showNotification = useCallback((notification: NotificationConfig) => {
    console.log('üîî Tentando mostrar notifica√ß√£o:', notification);
    
    // Toast especial para notifica√ß√µes de trial
    if (notification.type === 'trial') {
      console.log('üí≥ Mostrando toast de trial com a√ß√£o de checkout');
      toast({
        title: notification.title,
        description: notification.message,
        duration: 15000, // 15 segundos para trial
        action: {
          altText: "Assinar Agora",
          onClick: async () => {
            console.log('üí≥ Clique no bot√£o de assinatura - redirecionando para checkout');
            try {
              if (createCheckout && typeof createCheckout === 'function') {
                await createCheckout();
              } else {
                // Fallback se createCheckout n√£o estiver dispon√≠vel
                window.location.href = '/dashboard/profile';
              }
            } catch (error) {
              console.error('‚ùå Erro ao criar checkout:', error);
              window.location.href = '/dashboard/profile';
            }
          }
        }
      });
    } else {
      // Toast normal para outras notifica√ß√µes
      console.log('üçû Mostrando toast de notifica√ß√£o normal');
      toast({
        title: notification.title,
        description: notification.message,
        duration: 12000,
        action: {
          altText: "Ir para o Chat",
          onClick: () => {
            console.log('üñ±Ô∏è Clique no bot√£o do toast - redirecionando para chat');
            window.location.href = '/dashboard/chat';
          }
        }
      });
    }
    
    // Tentar notifica√ß√£o do navegador se tivermos permiss√£o
    if (permission === 'granted' && 'Notification' in window) {
      try {
        console.log('üì± Criando notifica√ß√£o do navegador');
        const browserNotification = new Notification(notification.title, {
          body: notification.message,
          icon: '/favicon.ico',
          badge: '/favicon.ico',
          tag: notification.id,
          requireInteraction: notification.type === 'trial', // Notifica√ß√µes de trial requerem intera√ß√£o
          silent: false
        });

        console.log('‚úÖ Notifica√ß√£o do navegador criada com sucesso');

        // Handler de clique
        browserNotification.onclick = () => {
          console.log('üñ±Ô∏è Clique na notifica√ß√£o do navegador - redirecionando');
          window.focus();
          
          if (notification.type === 'trial') {
            // Para notifica√ß√µes de trial, ir para o perfil/checkout
            window.location.href = '/dashboard/profile';
          } else {
            // Para outras notifica√ß√µes, ir para o chat
            window.location.href = '/dashboard/chat';
          }
          
          browserNotification.close();
        };

        // Auto-fechar ap√≥s tempo espec√≠fico
        const autoCloseTime = notification.type === 'trial' ? 20000 : 10000; // 20s para trial, 10s para outras
        setTimeout(() => {
          console.log('‚è∞ Auto-fechando notifica√ß√£o ap√≥s timeout');
          browserNotification.close();
        }, autoCloseTime);
        
      } catch (error) {
        console.error('‚ùå Erro ao criar notifica√ß√£o do navegador:', error);
      }
    } else {
      console.log(`‚ö†Ô∏è Notifica√ß√£o do navegador n√£o dispon√≠vel. Permiss√£o: ${permission}`);
    }
  }, [permission, createCheckout]);

  // Verificar e disparar notifica√ß√µes
  const checkNotifications = useCallback(() => {
    const now = new Date();
    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
    
    console.log(`‚è∞ Verificando notifica√ß√µes para ${currentTime}...`);
    
    const activeNotifications = notifications.filter(n => n.enabled);
    console.log(`üìã ${activeNotifications.length} notifica√ß√µes ativas de ${notifications.length} total`);
    
    activeNotifications.forEach(notification => {
      if (notification.time === currentTime) {
        console.log(`üéØ Disparando notifica√ß√£o: ${notification.title} (${notification.time})`);
        showNotification(notification);
      }
    });
  }, [notifications, showNotification]);

  // Configurar verifica√ß√£o peri√≥dica
  useEffect(() => {
    console.log('‚è±Ô∏è Configurando verifica√ß√£o peri√≥dica de notifica√ß√µes');
    const interval = setInterval(checkNotifications, 60000); // Verifica a cada minuto
    
    // Verificar imediatamente tamb√©m
    checkNotifications();
    
    return () => {
      console.log('üõë Parando verifica√ß√£o peri√≥dica');
      clearInterval(interval);
    };
  }, [checkNotifications]);

  // Fun√ß√µes de gerenciamento
  const addNotification = useCallback((notification: Omit<NotificationConfig, 'id' | 'createdAt'>) => {
    console.log('‚ûï Adicionando nova notifica√ß√£o:', notification);
    const newNotification: NotificationConfig = {
      ...notification,
      id: Date.now().toString(),
      createdAt: new Date()
    };
    const updated = [...notifications, newNotification];
    saveNotifications(updated);
  }, [notifications, saveNotifications]);

  const updateNotification = useCallback((id: string, updates: Partial<NotificationConfig>) => {
    console.log('üìù Atualizando notifica√ß√£o:', id, updates);
    const updated = notifications.map(n => 
      n.id === id ? { ...n, ...updates } : n
    );
    saveNotifications(updated);
  }, [notifications, saveNotifications]);

  const deleteNotification = useCallback((id: string) => {
    console.log('üóëÔ∏è Removendo notifica√ß√£o:', id);
    const updated = notifications.filter(n => n.id !== id);
    saveNotifications(updated);
  }, [notifications, saveNotifications]);

  const toggleNotification = useCallback((id: string) => {
    const notification = notifications.find(n => n.id === id);
    const newState = !notification?.enabled;
    console.log(`üîÑ Alternando notifica√ß√£o ${id}: ${newState ? 'ativada' : 'desativada'}`);
    updateNotification(id, { enabled: newState });
  }, [notifications, updateNotification]);

  // Fun√ß√£o para testar notifica√ß√£o com mais logs
  const testNotification = useCallback(() => {
    console.log('üß™ === INICIANDO TESTE DE NOTIFICA√á√ÉO ===');
    console.log('üîç Estado atual:', {
      permission,
      notificationSupported: 'Notification' in window,
      currentTime: new Date().toLocaleTimeString()
    });
    
    const testConfig: NotificationConfig = {
      id: 'test-notification-' + Date.now(),
      title: 'üß™ Teste de Notifica√ß√£o',
      message: 'Se voc√™ est√° vendo isso, as notifica√ß√µes est√£o funcionando! Clique para ir ao chat.',
      time: '00:00',
      enabled: true,
      type: 'custom',
      createdAt: new Date()
    };
    
    console.log('üìù Configura√ß√£o de teste:', testConfig);
    showNotification(testConfig);
    console.log('üß™ === TESTE DE NOTIFICA√á√ÉO FINALIZADO ===');
  }, [showNotification, permission]);

  // Fun√ß√£o para for√ßar verifica√ß√£o de permiss√£o
  const checkPermissionStatus = useCallback(() => {
    if ('Notification' in window) {
      const currentPermission = Notification.permission;
      console.log('üîç Verifica√ß√£o manual de permiss√£o:', currentPermission);
      setPermission(currentPermission);
      
      toast({
        title: "Status da permiss√£o",
        description: `Permiss√£o atual: ${currentPermission === 'granted' ? 'Concedida' : currentPermission === 'denied' ? 'Negada' : 'Aguardando'}`,
        duration: 3000
      });
      
      return currentPermission;
    }
    return 'default';
  }, []);

  return {
    notifications,
    permission,
    requestPermission,
    addNotification,
    updateNotification,
    deleteNotification,
    toggleNotification,
    showNotification,
    testNotification,
    checkPermissionStatus,
    isInTrialPeriod: isInTrialPeriod(),
    trialDaysRemaining: getTrialDaysRemaining()
  };
}
